version "2.4"

struct MonsterInfo
{
	Actor mo;
	class<Actor> spawnClass;
	Vector3 pos;
	double angle;
	bool bAmbush;
	int level;
	bool bNeedsToRespawn;
	
	void Clear()
	{
		mo = null;
		spawnClass = null;
		pos = (0,0,0);
		angle = 0;
		bAmbush = false;
		level = 0;
		bNeedsToRespawn = false;
	}
	
	void Copy(in MonsterInfo other)
	{
		mo = other.mo;
		spawnClass = other.spawnClass;
		pos = other.pos;
		angle = other.angle;
		bAmbush = other.bAmbush;
		level = other.level;
		bNeedsToRespawn = other.bNeedsToRespawn;
	}
}

class SoulHandler : StaticEventHandler
{
	const MAX_MONSTERS = 32768;
	
	private uint droppedSouls[MAXPLAYERS];
	private uint souls[MAXPLAYERS];
	private int playerDropLevels[MAXPLAYERS];
	private int playerBeaconLevels[MAXPLAYERS];
	private uint curMonster;
	MonsterInfo toRespawn[MAX_MONSTERS];
	
	override void WorldLoaded(WorldEvent e)
	{
		let sh = SaveHandler(EventHandler.Find("SaveHandler"));
		if (!sh)
			return;
		
		if (!e.isSaveGame)
		{
			for (uint i = 0; i < MAX_MONSTERS; ++i)
			{
				if (toRespawn[i].bNeedsToRespawn && toRespawn[i].spawnClass && level.levelNum == toRespawn[i].level)
				{
					if (toRespawn[i].mo)
					{
						toRespawn[i].mo.A_Respawn(RSF_TELEFRAG);
						toRespawn[i].mo.SetOrigin(toRespawn[i].pos, false);
						toRespawn[i].mo.angle = toRespawn[i].angle;
					}
					else
					{
						let mo = Actor.Spawn(toRespawn[i].spawnClass, toRespawn[i].pos);
						if (mo)
						{
							mo.bAmbush = toRespawn[i].bAmbush;
							mo.angle = toRespawn[i].angle;
						}
					}
								
					toRespawn[i].Clear();
				}
			}
		
			for (uint i = 0; i < MAXPLAYERS; ++i)
			{
				sh.UpdateSouls(i, souls[i], droppedSouls[i]);
				sh.UpdateItemsAndBeacons(i, playerDropLevels[i], playerBeaconLevels[i]);
				
				if (!playerInGame[i])
					continue;
				
				// Check for drops from a different level
				
				let items = sh.FindItems(players[i]);
				if (items && level.levelNum != playerDropLevels[i])
					items.Destroy();
				
				let beacon = sh.FindBeacon(players[i]);
				if (beacon && level.levelNum != playerBeaconLevels[i])
					beacon.Destroy();
			}
			
			for (uint i = 0; i < MAX_MONSTERS; ++i)
				sh.toRespawn[i].Copy(toRespawn[i]);
		}
		else
		{
			for (uint i = 0; i < MAXPLAYERS; ++i)
			{
				UpdateSouls(i, sh.GetSouls(i), sh.GetDroppedSouls(i));
				UpdateItemsAndBeacons(i, sh.GetItemLevel(i), sh.GetBeaconLevel(i));
			}
			
			for (uint i = 0; i < MAX_MONSTERS; ++i)
				toRespawn[i].Copy(sh.toRespawn[i]);
		}
	}
	
	void UpdateItemsAndBeacons(uint index, int itemLevel, int beaconLevel)
	{
		if (index >= MAXPLAYERS)
			return;
		
		playerDropLevels[index] = itemLevel;
		playerBeaconLevels[index] = beaconLevel;
	}
	
	void UpdateSouls(uint index, uint otherSouls, uint otherDroppedSouls)
	{
		if (index >= MAXPLAYERS)
			return;
		
		souls[index] = otherSouls;
		droppedSouls[index] = otherDroppedSouls;
	}
}

class SaveHandler : EventHandler
{
	const BEACON_PRICE = 10000;
	const MAX_MONSTERS = 32768;
	
	private uint curMonster;
	MonsterInfo toRespawn[MAX_MONSTERS];
	private bool bInDeathSequence;
	private PlayerPawn realPlayers[MAXPLAYERS];
	private uint droppedSouls[MAXPLAYERS];
	private uint souls[MAXPLAYERS];
	private int playerDropLevels[MAXPLAYERS];
	private int playerBeaconLevels[MAXPLAYERS];
	transient ui HUDFont soulsFont;
	
	uint GetSouls(uint index)
	{
		if (index >= MAXPLAYERS)
			return 0;
		
		return souls[index];
	}
	
	uint GetDroppedSouls(uint index)
	{
		if (index >= MAXPLAYERS)
			return 0;
		
		return droppedSouls[index];
	}
	
	void UpdateSouls(uint index, uint otherSouls, uint otherDroppedSouls)
	{
		if (index >= MAXPLAYERS)
			return;
		
		souls[index] = otherSouls;
		droppedSouls[index] = otherDroppedSouls;
	}
	
	int GetItemLevel(uint index)
	{
		if (index >= MAXPLAYERS)
			return 0;
		
		return playerDropLevels[index];
	}
	
	int GetBeaconLevel(uint index)
	{
		if (index >= MAXPLAYERS)
			return 0;
		
		return playerBeaconLevels[index];
	}
	
	void UpdateItemsAndBeacons(uint index, int itemLevel, int beaconLevel)
	{
		if (index >= MAXPLAYERS)
			return;
		
		playerDropLevels[index] = itemLevel;
		playerBeaconLevels[index] = beaconLevel;
	}
	
	override void WorldUnloaded(WorldEvent e)
	{
		let sh = SoulHandler(StaticEventHandler.Find("SoulHandler"));
		if (sh)
		{
			for (uint i = 0; i < MAXPLAYERS; ++i)
			{
				sh.UpdateSouls(i, souls[i], droppedSouls[i]);
				sh.UpdateItemsAndBeacons(i, playerDropLevels[i], playerBeaconLevels[i]);
			}
			
			for (uint i = 0; i < MAX_MONSTERS; ++i)
				sh.toRespawn[i].Copy(toRespawn[i]);
		}
	}
	
	// Why do I have to do this ???????
	private uint FindPlayer(in PlayerInfo player)
	{
		uint i = 0;
		for (; i < MAXPLAYERS; ++i)
		{
			if (players[i] == player)
				break;
		}
		
		return i;
	}
	
	void RetrieveSouls(in PlayerInfo player)
	{
		uint index = FindPlayer(player);
		
		if (index < players.Size())
		{
			souls[index] = droppedSouls[index];
			droppedSouls[index] = 0;
		}
	}
	
	override void PlayerEntered(PlayerEvent e)
	{
		let mo = players[e.playerNumber].mo;
		if (mo)
		{
			realPlayers[e.playerNumber] = mo;
			mo.spawnPoint = mo.pos;
			mo.spawnAngle = mo.angle;
		}
	}
	
	override void PlayerDied(PlayerEvent e)
	{
		if (!bInDeathSequence)
		{
			bInDeathSequence = true;
			for (uint i = 0; i < players.Size(); ++i)
			{
				if (playerInGame[i] && players[i].mo)
					players[i].mo.DamageMobj(null, null, Actor.TELEFRAG_DAMAGE, "Telefrag");
			}
			bInDeathSequence = false;
		}
		
		let mo = players[e.playerNumber].mo;
		if (mo)
		{
			let items = DroppedItems(Actor.Spawn("DroppedItems", mo.pos));
			if (items)
			{
				let old = FindItems(players[e.playerNumber]);
				if (old)
					old.Destroy();
				
				items.SetPlayer(players[e.playerNumber]);
				items.GrabItems();
				items.vel.z = 10 * items.GetGravity();
				
				playerDropLevels[e.playerNumber] = level.levelNum;
				droppedSouls[e.playerNumber] = souls[e.PlayerNumber];
				souls[e.PlayerNumber] = 0;
			}
		}
	}
	
	DroppedItems FindItems(in PlayerInfo player)
	{
		ThinkerIterator it = ThinkerIterator.Create("DroppedItems", Thinker.STAT_DEFAULT);
		DroppedItems mo;
		while (mo = DroppedItems(it.Next()))
		{
			if (mo && mo.GetPlayer() == player)
				return mo;
		}
		
		return null;
	}
	
	override void RenderOverlay(RenderEvent e)
	{
		if (!soulsFont)
		{
			Font fnt = "BIGUPPER";
			soulsFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft);
		}
		
		statusBar.DrawString(soulsFont, String.Format("%u", souls[consoleplayer]), (0,0), scale: (0.5,0.5));
	}
	
	override void WorldThingDied(WorldEvent e)
	{
		if (e.thing && e.thing.bIsMonster && e.thing.target && e.thing.target.player)
		{
			uint index = FindPlayer(e.thing.target.player);
			if (index < players.Size())
				souls[index] += e.thing.GetSpawnHealth();
			
			// Don't respawn new things
			if (e.thing.GetAge() < level.maptime)
				return;
			
			toRespawn[curMonster].mo = e.thing;
			toRespawn[curMonster].spawnClass = e.thing.GetClass();
			toRespawn[curMonster].pos = e.thing.spawnPoint;
			toRespawn[curMonster].angle = e.thing.spawnAngle;
			toRespawn[curMonster].bAmbush = e.thing.bAmbush;
			toRespawn[curMonster].level = level.levelNum;
			
			++curMonster;
			if (curMonster >= MAX_MONSTERS)
				curMonster = 0;
		}
	}
	
	override bool InputProcess(InputEvent e)
	{
		let mo = players[consoleplayer].mo;
		if (mo && mo.health > 0)
			return false;
		
		if (mo is "PlayerChunk" && !realPlayers[consoleplayer])
			return false;
		
		int key1, key2;
		[key1, key2] = Bindings.GetKeysForCommand("+use");
		if ((key1 && key1 == e.keyScan) || (key2 && key2 == e.keyScan))
		{
			EventHandler.SendNetworkEvent("RespawnPlayer");
			return true;
		}
		
		return false;
	}
	
	SpawnBeacon FindBeacon(in PlayerInfo player)
	{
		ThinkerIterator it = ThinkerIterator.Create("SpawnBeacon", Thinker.STAT_DEFAULT);
		SpawnBeacon mo;
		while (mo = SpawnBeacon(it.Next()))
		{
			if (mo && mo.GetPlayer() == player)
				return mo;
		}
		
		return null;
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		if (e.name ~== "PlaceBeacon")
		{
			PlayerInfo player = players[e.player];
			if (!player || !player.mo || player.mo.health <= 0)
				return;
			
			if (!(player.mo.pos.z ~== player.mo.floorz))
			{
				Console.printf("You must be on the ground to spawn this");
				return;
			}
			
			let sec = player.mo.CurSector;
			if (sec.damageAmount > 0)
			{
				Console.printf("You must find safer ground first");
				return;
			}
			
			int delta = sec.ceilingPlane.ZAtPoint(player.mo.pos.xy) - sec.floorPlane.ZAtPoint(player.mo.pos.xy);
			if (delta < player.mo.default.height)
			{
				Console.printf("This area is too small to spawn this");
				return;
			}
			
			if (souls[e.player] < BEACON_PRICE)
			{
				uint amount = BEACON_PRICE - souls[e.player];
				string aid;
				if (amount == 1)
					aid = String.Format("You need %u more soul to spawn this", amount);
				else
					aid = String.Format("You need %u more souls to spawn this", amount);
				
				Console.printf("%s", aid);
				return;
			}
			
			let beacon = SpawnBeacon(Actor.Spawn("SpawnBeacon", player.mo.pos));
			if (beacon)
			{
				player.mo.spawnAngle = player.mo.angle;
				let old = FindBeacon(player);
				if (old)
					old.Destroy();
				
				beacon.SetPlayer(player);
				souls[e.player] -= BEACON_PRICE;
				
				for (uint i = 0; i < MAX_MONSTERS; ++i)
					toRespawn[i].Clear();
				
				Console.printf("Progress saved");
			}
		}
		
		if (e.isManual)
			return;
		
		if (e.name ~== "RespawnPlayer")
		{
			PlayerInfo player = players[e.player];
			if (player)
			{
				if (player.mo is "PlayerChunk" && realPlayers[e.player])
				{
					let chunk = player.mo;
					chunk.player = null;
					player.mo = realPlayers[e.player];
					player.mo.player = player;
					player.mo.ObtainInventory(chunk);
					player.mo.health = chunk.health;
					player.mo.angle = chunk.angle;
					
					for (uint i = 0; i < players.Size(); ++i)
					{
						if (playerInGame[i] && players[i].camera == chunk)
							players[i].camera = player.mo;
					}
				}
				
				player.damagecount = 0;
				player.poisoncount = 0;
				player.Resurrect();
				
				let mo = player.mo;
				if (mo)
				{
					let bc = FindBeacon(player);
					if (bc)
					{
						let sec = bc.CurSector;
						int delta = sec.ceilingPlane.ZAtPoint(bc.pos.xy) - sec.floorPlane.ZAtPoint(bc.pos.xy);
						if (delta < mo.default.height)
							mo.Teleport(mo.spawnPoint, mo.spawnAngle, TELF_DESTFOG);
						else
							mo.Teleport(bc.pos, mo.spawnAngle, TELF_DESTFOG);
					}
					else
						mo.Teleport(mo.spawnPoint, mo.spawnAngle, TELF_DESTFOG);
					
					mo.TakeInventory("BasicArmor", mo.CountInv("BasicArmor"));
					let hex = HexenArmor(mo.FindInventory("HexenArmor"));
					if (hex)
					{
						for (uint i = 0; i < hex.slotsIncrement.Size(); ++i)
						{
							hex.slots[i] = 0;
							hex.slotsIncrement[i] = 0;
						}
					}
				}
				
				ThinkerIterator it = ThinkerIterator.Create("Actor", Thinker.STAT_DEFAULT);
				Actor mon;
				while (mon = Actor(it.Next()))
				{
					if (mon && mon.bIsMonster && mon.health > 0)
					{
						mon.target = null;
						mon.health = mon.GetSpawnHealth();
						mon.SetOrigin(mon.spawnPoint, false);
						mon.angle = mon.spawnAngle;
					}
				}
				
				for (uint i = 0; i < toRespawn.Size(); ++i)
				{
					if (toRespawn[i].spawnClass)
					{
						toRespawn[i].bNeedsToRespawn = true;
						
						if (level.levelNum == toRespawn[i].level)
						{
							if (toRespawn[i].mo)
							{
								toRespawn[i].mo.A_Respawn(RSF_TELEFRAG);
								toRespawn[i].mo.SetOrigin(toRespawn[i].pos, false);
								toRespawn[i].mo.angle = toRespawn[i].angle;
							}
							else
							{
								let mo = Actor.Spawn(toRespawn[i].spawnClass, toRespawn[i].pos);
								if (mo)
								{
									mo.bAmbush = toRespawn[i].bAmbush;
									mo.angle = toRespawn[i].angle;
								}
							}
							
							toRespawn[i].Clear();
						}
					}
				}
			}
		}
	}
}

class SpawnBeacon : TechLamp
{
	private PlayerInfo attachedPlayer;
	
	Default
	{
		+MOVEWITHSECTOR
		+NOBLOCKMAP
		-SOLID
	}
	
	void SetPlayer(in PlayerInfo player)
	{
		if (player)
			attachedPlayer = player;
	}
	
	PlayerInfo GetPlayer()
	{
		return attachedPlayer;
	}
}

class DroppedItems : Inventory
{
	static const class<Inventory> ignore[] =
	{
		"BackpackItem", "Key", "PuzzleItem", "Health", "Armor", "Powerup", "DummyStrifeItem", "QuestItem",
		"WeaponHolder", "Weapon"
	};
	
	private PlayerInfo attachedPlayer;
	private Array<Inventory> items;
	private Array<class<Inventory> > dropItems;
	private Array<int> dropAmounts;
	private uint souls;
	
	Default
	{
		Height 26;
		Inventory.PickupMessage "Items recovered";
		
		+INVENTORY.ALWAYSPICKUP
	}
	
	States
	{
		Spawn:
			BPAK A -1;
			Stop;
	}
	
	override void Tick()
	{
		super.Tick();
		
		if (!attachedPlayer || !attachedPlayer.mo)
			Destroy();
	}
	
	override void Touch(Actor toucher)
	{
		if (toucher.player != attachedPlayer)
			return;
		
		super.Touch(toucher);
	}
	
	override void AttachToOwner(Actor other)
	{
		super.AttachToOwner(other);
		
		if (owner)
		{
			for (uint i = 0; i < items.Size(); ++i)
			{
				if (items[i])
				{
					let item = owner.FindInventory(items[i].GetClass());
					if (item)
						item.HandlePickup(items[i]);
					else
						items[i].AttachToOwner(owner);
				}
			}
			
			if (owner.player)
				owner.player.PendingWeapon = WP_NOCHANGE;
		}
		
		let save = SaveHandler(EventHandler.Find("SaveHandler"));
		if (save)
			save.RetrieveSouls(attachedPlayer);
		
		Destroy();
	}
	
	void SetPlayer(in PlayerInfo player)
	{
		if (player)
			attachedPlayer = player;
	}
	
	PlayerInfo GetPlayer()
	{
		return attachedPlayer;
	}
	
	void GrabItems()
	{
		if (!attachedPlayer || !attachedPlayer.mo)
			return;
		
		let mo = attachedPlayer.mo;
		
		let di = mo.GetDropItems();
		while (di)
		{
			dropItems.Push((class<Inventory>)(di.Name));
			dropAmounts.Push(di.amount);
			di = di.next;
		}
			
		for (let probe = mo.inv; probe != null;)
		{
			if (probe)
			{
				let next = probe.inv;
					
				class<Inventory> type = (class<Inventory>)(probe.GetClass());
					
				if (probe.bUndroppable || !probe.CanPickUp(self) || CheckIgnore(type))
				{
					probe = next;
					continue;
				}
					
				bool drop;
				int index;
				int dropAmount = -1;
				[drop, index] = CheckDropItem(type);
				if (drop && index >= 0 && index < dropAmounts.Size())
				{
					dropAmount = probe.amount - dropAmounts[index];
					if (dropAmount <= 0)
					{
						probe.amount = dropAmounts[index];
						probe = next;
						continue;
					}
				}
				else if (probe is "Ammo")
				{
					int spawnAmount = probe.maxAmount / 2;
					dropAmount = probe.amount - spawnAmount;
					if (dropAmount <= 0)
					{
						probe.amount = spawnAmount;
						probe = next;
						continue;
					}
				}
					
				let item = probe.CreateTossable(dropAmount > -1 ? dropAmount : probe.amount);
				if (item)
				{
					item.AttachToOwner(self);
					if (probe is "HealthPickup")
					{
						item.amount += probe.amount;
						probe.amount = 0;
					}
					
					items.Push(item);
					
					if (!probe.amount)
						probe.Destroy();
				}
					
				probe = next;
			}
		}
	}
	
	private bool, int CheckDropItem(class<Inventory> item)
	{
		for (uint i = 0; i < dropItems.Size(); ++i)
		{
			if (item == dropItems[i])
				return true, i;
		}
		
		return false, -1;
	}
	
	private bool CheckIgnore(class<Inventory> item)
	{
		for (uint i = 0; i < ignore.Size(); ++i)
		{
			if (item is ignore[i])
				return true;
		}
		
		return false;
	}
}